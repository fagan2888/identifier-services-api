{
	"openapi": "3.0.0",
	"info": {
		"title": "Identifier Services API",
		"version": "1.0.0"
	},
	"servers": [
		{
			"url": ""
		}
	],
	"tags": [
		{
			"name": "users",
			"description": "Operate on users"
		},
		{
			"name": "publishers",
			"description": "Operate on publishers"
		}
	],
	"security": [
		{
			"httpBasic": []
		}
	],
	"paths": {
		"/users": {
			"post": {
				"summary": "Creates a new users",
				"tags": ["users"],
				"responses": {
					"200": {
						"description": "user response"
					},
					"201": {
						"description": "User successfully created",
						"headers": {
							"Location": {
								"description": "",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": ""
					},
					"401": {
						"description": ""
					},
					"403": {
						"description": ""
					},
					"413": {
						"description": ""
					},
					"415": {
						"description": ""
					}
				}
			}
		},

		"/users/{id}": {
			"get": {
				"summary": "Retrieve user information",
				"tags": ["users"],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": ""
								}
							}
						}
					},
					"401": {
						"description": ""
					},
					"403": {
						"description": ""
					},
					"404": {
						"description": ""
					}
				}
			},
			"put": {
				"summary": "Update user information",
				"tags": ["users"],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/User"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The user was created"
					},
					"204": {
						"description": "The user was updated"
					},
					"400": {
						"description": "malformed content"
					},
					"401": {
						"description": "Authentication failed"
					},
					"403": {
						"description": "Not authorized"
					},
					"404": {
						"description": "The user doesnot exist"
					},
					"422": {
						"description": "Invalid syntax"
					}
				}
			},
			"delete": {
				"summary": "Delete a user",
				"description": "The user is completely removed including all related records in the queue",
				"tags": ["users"],
				"responses": {
					"204": {
						"description": "The user was removed"
					},
					"401": {
						"description": "Authentication failed"
					},
					"403": {
						"description": "Not authorized"
					},
					"404": {
						"description": "Content not found"
					}
				}
			}
		},
		"users/{id}/password": {
			"post": {
				"summary": "Change user password",
				"tags": ["users"],
				"responses": {
					"204": {
						"description": "Return the content"
					},
					"401": {
						"description": "Authentication failed"
					},
					"403": {
						"description": "Not authorized"
					},
					"404": {
						"description": "Content not found"
					}
				}
			}
		},
		"users/query": {
			"post": {
				"summary": "Query for users",
				"tags": ["users"],
				"parameters": []
			}
		},

		"/publishers": {
			"post": {
				"summary": "Create a new publisher",
				"tags": ["publishers"],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Publisher"
								}
							}
						}
					},
					"201": {
						"description": "New Publisher Created",
						"headers": {
							"Location": {
								"description": " ",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Publisher does not exist or Bad Request"
					},
					"401": {
						"description": "Authentication failed or Unauthorized"
					},
					"403": {
						"description": "Forbidden or Not authorized"
					},
					"413": {
						"description": "Request body is too large"
					},
					"415": {
						"description": "Content type was not specified or Unsupported Media Type"
					},
					"default": {
						"description": "unexpected error"
					}
				}
			}
		},
		"/publishers/{id}": {
			"get": {
				"summary": "Retrive a publisher",
				"tags": ["publishers"],
				"parameters": [
					{
						"name": "publisherId",
						"in": "path",
						"description": "ID of publisher to fetch",
						"require": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Publisher"
								}
							}
						}
					},
					"401": {
						"description": "Authentication failed"
					},
					"403": {
						"description": "Not authorized or Forbidden"
					},
					"404": {
						"description": "No record found"
					},
					"default": {
						"description": "unexpected error"
					}
				}
			},
			"put": {
				"summary": "Update a publisher",
				"tags": ["publishers"],
				"parameters": [
					{
						"name": "publisherId",
						"in": "path",
						"description": "ID of publisher to fetch",
						"require": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Publisher"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Publisher"
								}
							}
						}
					},
					"201": {
						"description": "The publisher was updated",
						"content": {
							"application/json": {
								"schema": {
									"type":"string"
								}
							}
						}
					},
					"204": {
						"description": "No new content to be updated"
					},
					"400": {
						"description": "Malformed content or Bad request"
					},
					"401": {
						"description": "Authentication failed"
					},
					"403": {
						"description": "Not authorized or Forbidden"
					},
					"404": {
						"description": "The publisher does not exist"
					},
					"422": {
						"description": "Invalid syntax"
					},
					"default": {
						"description": "unexpected error"
					}
				}
			},
			"delete": {
				"summary": "Delete a publisher",
				"description": "The publisher is removed",
				"tags": ["publishers"],
				"responses": {
					"200": {
						"description": "OK"
					},
					"204": {
						"description": "The publisher is removed."
					},
					"401": {
						"description": "Authentication failed"
					},
					"403": {
						"description": "Not authorized or Forbidden"
					},
					"404": {
						"description": "The publisher does not exist"
					},
					"default": {
						"description": "unexpected error"
					}
				}
			}
		},
		"/publishers/query": {
			"post": {
				"summary": "Query for publishers",
				"tags": ["publishers"],
				"responses": {
					"200": {
						"description": "OK"
					},
					"201": {
						"description": "Query returned "
					},
					"401": {
						"description": "Authentication failed"
					},
					"403": {
						"description": "Not authorized or Forbidden"
					},
					"404": {
						"description": "The publisher does not exist"
					}
				},
				"default": {
					"description": "unexpected error"
				}
			}
		},
		"/publishers/{id}/publications": {
			"post": {
				"summary": "Create a new publication",
				"tags": ["publications"],
				"parameters": [
					{
						"name": "publicationId",
						"in": "path",
						"description": "ID of publishers",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"201": {
						"description": "New Publication created"
					},
					"401": {
						"description": "Authentication failed"
					},
					"403": {
						"description": "Not authorized or Forbidden"
					},
					"404": {
						"description": "The publisher does not exist"
					},
					"default": {
						"description": "unexpected error"
					}
				}
			}
		}
	},
	"components": {
		"securitySchemes": {
			"httpBasic": {
				"type": "http",
				"scheme": "basic"
			}
		},
		"schemas": {
			"User": {
				"type": "object",
				"properties": {
					"id": {"type": "string", "required": true},
					"preference": {
						"type": "object",
						"properties": {
							"defaultLanguage": {"type": "string", "required": true}
						}
					}
				}
			},
			"Publisher": {
				"type": "object",
				"properties": {
					"id": {"type": "string", "required": true},
					"lastUpdated": {
						"type": "object",
						"properties": {
							"timestamp": {"type": "string", "required": true},
							"user": {"type": "string", "required": true}
						}
					},
					"name": {"type": "string", "required": true},
					"language": {"type": "string", "required": true},
					"metadataDelivery": {
						"type": "string",
						"enum": ["manual", "batch", "external"]
					},
					"activity": {
						"type": "object",
						"properties": {
							"active": {"type": "boolean", "default": true, "required": true},
							"yearInactivated": {"type": "number"}
						}
					},
					"streetAdderss": {
						"type": "object",
						"properties": {
							"address": {"type": "string", "required": true},
							"city": {"type": "string", "required": true},
							"zip": {"type": "string", "required": true}
						}
					},
					"email": {"type": "string", "format": "email", "required": true},
					"website": {"type": "string", "required": true}
				},
				"Publication": {},
				"Error": {}
			}
		}
	}
}
